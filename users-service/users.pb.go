// Code generated by protoc-gen-go.
// source: users.proto
// DO NOT EDIT!

/*
Package users is a generated protocol buffer package.

It is generated from these files:
	users.proto

It has these top-level messages:
	User
	UserInfo
	TrelloInfo
*/
package users

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/TuneLab/go-truss/deftree/googlethirdparty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	// ID = 0 for create
	// Id is immutable
	ID     int64       `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Info   *UserInfo   `protobuf:"bytes,2,opt,name=Info" json:"Info,omitempty"`
	Trello *TrelloInfo `protobuf:"bytes,9,opt,name=Trello" json:"Trello,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *User) GetInfo() *UserInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *User) GetTrello() *TrelloInfo {
	if m != nil {
		return m.Trello
	}
	return nil
}

type UserInfo struct {
	Username string `protobuf:"bytes,1,opt,name=Username" json:"Username,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=Email" json:"Email,omitempty"`
	Hash     string `protobuf:"bytes,3,opt,name=Hash" json:"Hash,omitempty"`
	Salt     string `protobuf:"bytes,4,opt,name=Salt" json:"Salt,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserInfo) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *UserInfo) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

// TrelloInfo comes from trello, this information is used by
// [`ambition-rello`](https://github.com/adamryman/ambition-rello)
type TrelloInfo struct {
	ID         string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	AvatarHas  string `protobuf:"bytes,2,opt,name=AvatarHas" json:"AvatarHas,omitempty"`
	FullName   string `protobuf:"bytes,3,opt,name=FullName" json:"FullName,omitempty"`
	Initials   string `protobuf:"bytes,4,opt,name=Initials" json:"Initials,omitempty"`
	Username   string `protobuf:"bytes,5,opt,name=Username" json:"Username,omitempty"`
	WebhookURL string `protobuf:"bytes,6,opt,name=WebhookURL" json:"WebhookURL,omitempty"`
}

func (m *TrelloInfo) Reset()                    { *m = TrelloInfo{} }
func (m *TrelloInfo) String() string            { return proto.CompactTextString(m) }
func (*TrelloInfo) ProtoMessage()               {}
func (*TrelloInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TrelloInfo) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *TrelloInfo) GetAvatarHas() string {
	if m != nil {
		return m.AvatarHas
	}
	return ""
}

func (m *TrelloInfo) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *TrelloInfo) GetInitials() string {
	if m != nil {
		return m.Initials
	}
	return ""
}

func (m *TrelloInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *TrelloInfo) GetWebhookURL() string {
	if m != nil {
		return m.WebhookURL
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "users.User")
	proto.RegisterType((*UserInfo)(nil), "users.UserInfo")
	proto.RegisterType((*TrelloInfo)(nil), "users.TrelloInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Users service

type UsersClient interface {
	// Create takes information about a user and creates an entry
	// It returns that User with it's ID populated
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// ReadUser takes some information about a user and tries to find the
	// user with that information
	// Accepted values: ID, Info.Username, Info.email, and Trello.ID
	ReadUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// UpdateUser requires an ID, which can be obttained from ReadUser.
	// All other non-zerp values will be updated
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// DeleteUser requires an ID, as a Read before a delete is a good idea.
	// It will return User with just thre requested ID on success
	DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
}

type usersClient struct {
	cc *grpc.ClientConn
}

func NewUsersClient(cc *grpc.ClientConn) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/users.Users/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ReadUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/users.Users/ReadUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/users.Users/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/users.Users/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Users service

type UsersServer interface {
	// Create takes information about a user and creates an entry
	// It returns that User with it's ID populated
	CreateUser(context.Context, *User) (*User, error)
	// ReadUser takes some information about a user and tries to find the
	// user with that information
	// Accepted values: ID, Info.Username, Info.email, and Trello.ID
	ReadUser(context.Context, *User) (*User, error)
	// UpdateUser requires an ID, which can be obttained from ReadUser.
	// All other non-zerp values will be updated
	UpdateUser(context.Context, *User) (*User, error)
	// DeleteUser requires an ID, as a Read before a delete is a good idea.
	// It will return User with just thre requested ID on success
	DeleteUser(context.Context, *User) (*User, error)
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ReadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ReadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/ReadUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ReadUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).DeleteUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "users.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Users_CreateUser_Handler,
		},
		{
			MethodName: "ReadUser",
			Handler:    _Users_ReadUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Users_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Users_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}

func init() { proto.RegisterFile("users.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0xd1, 0x4a, 0xeb, 0x40,
	0x10, 0x86, 0x4f, 0xda, 0xa4, 0x34, 0x53, 0x38, 0x87, 0xb3, 0x9c, 0x8b, 0x50, 0x0e, 0x52, 0x22,
	0x48, 0xbc, 0xb0, 0x81, 0xfa, 0x04, 0x62, 0x2d, 0x0d, 0x14, 0x2f, 0x62, 0x8b, 0xd7, 0x1b, 0x33,
	0x4d, 0x82, 0xdb, 0xdd, 0xb2, 0xbb, 0x11, 0x7c, 0x28, 0x7d, 0x46, 0xd9, 0x4d, 0x6c, 0xa3, 0x37,
	0xf5, 0x6e, 0xfe, 0x7f, 0xbe, 0xcc, 0x3f, 0x93, 0x04, 0x46, 0xb5, 0x42, 0xa9, 0xa6, 0x7b, 0x29,
	0xb4, 0x20, 0x9e, 0x15, 0xe3, 0x45, 0x51, 0xe9, 0xb2, 0xce, 0xa6, 0x4f, 0x62, 0x17, 0xaf, 0x6b,
	0x8e, 0x2b, 0x9a, 0xc5, 0x85, 0xb8, 0xd2, 0xb2, 0x56, 0x2a, 0xce, 0x71, 0xab, 0x25, 0x62, 0x5c,
	0x08, 0x51, 0x30, 0xd4, 0x65, 0x25, 0xf3, 0x3d, 0x95, 0xfa, 0x35, 0xa6, 0x9c, 0x0b, 0x4d, 0x75,
	0x25, 0x78, 0x3b, 0x2e, 0xdc, 0x82, 0xbb, 0x51, 0x28, 0xc9, 0x6f, 0xe8, 0x25, 0xf3, 0xc0, 0x99,
	0x38, 0x51, 0x3f, 0xed, 0x25, 0x73, 0x72, 0x0e, 0x6e, 0xc2, 0xb7, 0x22, 0xe8, 0x4d, 0x9c, 0x68,
	0x34, 0xfb, 0x33, 0x6d, 0x56, 0x30, 0xa8, 0xb1, 0x53, 0xdb, 0x24, 0x97, 0x30, 0x58, 0x4b, 0x64,
	0x4c, 0x04, 0xbe, 0xc5, 0xfe, 0xb6, 0x58, 0x63, 0x5a, 0xb0, 0x05, 0xc2, 0x1c, 0x86, 0x9f, 0x0f,
	0x93, 0x71, 0x53, 0x73, 0xba, 0x43, 0x9b, 0xe8, 0xa7, 0x07, 0x4d, 0xfe, 0x81, 0x77, 0xb7, 0xa3,
	0x15, 0xb3, 0xc1, 0x7e, 0xda, 0x08, 0x42, 0xc0, 0x5d, 0x52, 0x55, 0x06, 0x7d, 0x6b, 0xda, 0xda,
	0x78, 0x0f, 0x94, 0xe9, 0xc0, 0x6d, 0x3c, 0x53, 0x87, 0xef, 0x0e, 0xc0, 0x31, 0xbc, 0x73, 0x94,
	0x6f, 0x8f, 0xfa, 0x0f, 0xfe, 0xcd, 0x0b, 0xd5, 0x54, 0x2e, 0xa9, 0x6a, 0x03, 0x8e, 0x86, 0x59,
	0x6b, 0x51, 0x33, 0x76, 0x6f, 0xd6, 0x6a, 0x82, 0x0e, 0xda, 0xf4, 0x12, 0x5e, 0xe9, 0x8a, 0x32,
	0xd5, 0x06, 0x1e, 0xf4, 0x97, 0x73, 0xbc, 0x6f, 0xe7, 0x9c, 0x01, 0x3c, 0x62, 0x56, 0x0a, 0xf1,
	0xbc, 0x49, 0x57, 0xc1, 0xc0, 0x76, 0x3b, 0xce, 0xec, 0xcd, 0x01, 0xcf, 0xc0, 0x8a, 0x44, 0x00,
	0xb7, 0x12, 0xa9, 0x46, 0xfb, 0x39, 0x46, 0x9d, 0x17, 0x3e, 0xee, 0x8a, 0xf0, 0x17, 0xb9, 0x80,
	0x61, 0x8a, 0x34, 0x3f, 0xc9, 0x45, 0x00, 0x9b, 0x7d, 0xfe, 0x93, 0x89, 0x11, 0xc0, 0x1c, 0x19,
	0x9e, 0x26, 0xb3, 0x81, 0xfd, 0x6b, 0xae, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x7d, 0x62,
	0x0e, 0x93, 0x02, 0x00, 0x00,
}
